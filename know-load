#!/usr/bin/python3

import sys
import os
import urllib
import argparse
from io import BytesIO

from rdflib import Graph, URIRef
from PKB4Unix.iotools import absurl, guess_contentType, defaultAcceptHeader
from PKB4Unix.endpoint import put_data

argparser = argparse.ArgumentParser(description='Load a graph into the SPARQL endpoint')
argparser.add_argument('urls', nargs='+', metavar='URL',
                    help=('Files to load. - reads from STDIN.'
                          '(Reading from STDIN is inefficient, because '
                          'in order to determine the Content-length, '
                          'all data must be read before it can be sent '
                          'to the server.)'))
argparser.add_argument('-i', '--identifier', nargs='+', metavar='URI', dest='identifiers',
                    help='Override graph name. Must be used when reading from STDIN. If used, the number of identifiers must match the number of file arguments.')
argparser.add_argument('-t', '--content-type', nargs='+', dest='contentTypes', metavar='TYPE',
                    help='Override guessing of the correct Content-type. Defaults to application/rdf+xml when reading from STDIN. If used, the number of content-types must be one or match the number of file arguments.')
argparser.add_argument('--incorporate', dest='incorporate', action='store_true',
                    help='Keep already existing triples of the graphs on the SPARQL endpoint')

args = argparser.parse_args()

if '-' in args.urls:
    if not args.identifiers:
        print("When reading from STDIN, --identifier and --content-type must be used", file=sys.stderr)
        exit(1)

if args.identifiers and not (len(args.identifiers) == len(args.urls)):
    print("--indentifier must have as many arguments as there are files to load")
    exit(1)
elif not args.identifiers:
    args.identifiers = [None for f in args.urls]

if args.contentTypes and not (len(args.contentTypes) == len(args.urls)):
    if len(args.contentTypes) == 1:
        args.contentTypes *= len(args.urls)
    else:
        print("--content-type must have one or as many arguments as there are files to load")
        exit(1)
elif not args.contentTypes:
    args.contentTypes = [None for f in args.urls]

for (url, identifier, contentType) in zip(args.urls, args.identifiers, args.contentTypes):
    print("{}:".format("STDIN" if url == '-' else url), end=" ")
    if url == '-':
        # Need to read all data beforehand, otherwise the
        # Content-length can not be determined by http.client.
        f = sys.stdin.buffer.read()
        if not identifier:
            identifier = url
        if not contentType:
            contentType = 'application/rdf+xml'
    elif url.startswith("file:"):
        f = open(iotools.url2localpath(absurl))
        if not identifier:
            identifier = url
        if not contentType:
            contentType = iotools.guess_contentType(url, True) or 'application/rdf+xml'
    else:
        req = urllib.request.Request(absurl(url))
        req.add_header("Accept: ", contentType or defaultAcceptHeader)
        f = urllib.request.urlopen(req)
        if not identifier:
            identifier = f.geturl()
        if not contentType:
            contentType = f.info().get('content-type')
            contentType = contentType.split(";", 1)[0]
        f = f.read()

    print("loading as {} ...".format(identifier), end=" ")
    put_data(f, identifier, contentType, keep_existing=args.incorporate)
    print("done.")

