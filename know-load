#!/usr/bin/python3

import sys
import os
import urllib
import argparse

from rdflib import Graph, URIRef
import Basics

argparser = argparse.ArgumentParser(description='Load a graph into the SPARQL endpoint')
argparser.add_argument('files', nargs='+', metavar='FILE',
                    help=('Files to load. - reads from STDIN.'
                          '(Reading from STDIN is inefficient, because '
                          'in order to determine the Content-length, '
                          'all data must be read before it can be sent '
                          'to the server.)'))
argparser.add_argument('-i', '--identifier', nargs='+', metavar='URI', dest='identifiers',
                    help='Override graph name. Must be used when reading from STDIN. If used, the number of identifiers must match the number of file arguments.')
argparser.add_argument('-t', '--content-type', nargs='+', dest='contentTypes', metavar='TYPE',
                    help='Override guessing of the correct Content-type. Defaults to application/rdf+xml when reading from STDIN. If used, the number of content-types must be one or match the number of file arguments.')

args = argparser.parse_args()

if '-' in args.files:
    if not args.identifiers:
        print("When reading from STDIN, --identifier and --content-type must be used", file=sys.stderr)
        exit(1)

if args.identifiers and not (len(args.identifiers) == len(args.files)):
    print("--indentifier must have as many arguments as there are files to load")
elif not args.identifiers:
    args.identifiers = [Basics.absurl(filename) for filename in args.files]

if args.contentTypes and not (len(args.contentTypes) == len(args.files)):
    if len(args.contentTypes) == 1:
        args.contentTypes *= len(args.files)
    else:
        print("--content-type must have one or as many arguments as there are files to load")
elif not args.contentTypes:
    args.contentTypes = ['application/rdf+xml' if filename=='-' else Basics.guessContentType(filename) for filename in args.files]

for (filename, uri, contentType) in zip(args.files, args.identifiers, args.contentTypes):
    print("Loading {} as {} ...".format("STDIN" if filename == '-' else filename, uri))
    if filename == '-':
        # Need to read all data beforehand, otherwise the
        # Content-length can not be determined by http.client.
        f = sys.stdin.buffer.read()
    else:
        f = open(filename, mode="br")
    Basics.put_data(f, uri, contentType)
    if not filename == '-':
        f.close()

