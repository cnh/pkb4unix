#!/usr/bin/python3

import sys
import os
import urllib
import argparse

from rdflib import Graph, URIRef
import Basics

argparser = argparse.ArgumentParser(description='Save a graph from a SPARQL endpoint to a file')
argparser.add_argument('identifiers', nargs='+', metavar='URI',
                    help=('Graphs to save'))
argparser.add_argument('-f', '--file', nargs='+', metavar='FILE', dest='files',
                    help='Override file name. - denotes STDOUT. If used, the number of identifiers must match the number of identifier arguments.')
argparser.add_argument('-t', '--content-type', nargs='+', dest='contentTypes', metavar='TYPE',
                    help=('Set content-type to be used in the Accept-header of the SPARQL request. '
                    'For writing to STDOUT, it defaults to "application/rdf+xml" If used, the number of content-types must be one or match the number of identifier arguments.'))

args = argparser.parse_args()

args.identifiers = [Basics.absurl(ident) for ident in args.identifiers]

if args.files and not (len(args.files) == len(args.identifiers)):
    print("--file must have as many arguments as there are graphs to save")
elif not args.files:
    args.files = [Basics.fileurl2path(ident) for ident in args.identifiers]

if args.contentTypes and not (len(args.contentTypes) == len(args.identifiers)):
    if len(args.contentTypes) == 1:
        args.contentTypes *= len(args.identifiers)
    else:
        print("--content-type must have one or as many arguments as there are graphs to save")
elif not args.contentTypes:
    args.contentTypes = [Basics.guessContentType(ident) for ident in args.identifiers]

for (filename, uri, contentType) in zip(args.files, args.identifiers, args.contentTypes):
    print("Saving {} to {} ...".format(uri, "STDOUT" if filename == '-' else filename))
    if filename == '-':
        f = sys.stdout.buffer
    else:
        f = open(filename, mode="bw")
    with Basics.get_data(uri, contentType) as response:
        for s in iter(lambda: response.read(4096), b''):
            f.write(s)

